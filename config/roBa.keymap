#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// ============================================================================
// LAYER DEFINITIONS
// ============================================================================
#define BASE     0
#define FUNC     1
#define NUM      2
#define NAV      3
#define MOUSE    4
#define SCROLL   5
#define SYS      6

// ============================================================================
// BEHAVIOR CONFIGURATION
// ============================================================================
&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

&sl { 
    release-after-ms = <300>; 
};

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

/ {
    // ========================================================================
    // COMBO DEFINITIONS
    // ========================================================================
    combos {
        compatible = "zmk,combos";
        
        // System combos
        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };
        
        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            timeout-ms = <50>;
        };
        
        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <50>;
        };
        
        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <8 9>;
            timeout-ms = <50>;
        };
        
        // Layer toggles
        combo_mouse {
            bindings = <&tog MOUSE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };
        
        // Special characters
        combo_equals {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };
        
        combo_question {
            bindings = <&kp QMARK>;
            key-positions = <32 33>;
            timeout-ms = <50>;
        };
    };

    // ========================================================================
    // CUSTOM BEHAVIORS
    // ========================================================================
    behaviors {
        // Home row mods with better timing
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 35 36 37 38>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        // Layer tap with space
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
        };

        // Smart shift behavior
        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        // Encoder behaviors
        encoder_scroll: encoder_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_SCROLL";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <30>;
        };

        encoder_vol: encoder_volume {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_VOL_UP>;
            tap-ms = <30>;
        };
    };

    // ========================================================================
    // KEYMAP LAYERS
    // ========================================================================
    keymap {
        compatible = "zmk,keymap";

        // Layer 0: Base QWERTY
        base_layer {
            label = "Base";
            bindings = <
    &kp Q        &kp W        &kp E         &kp R         &kp T                                    &kp Y         &kp U         &kp I         &kp O         &kp P
    &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G        &kp C_MUTE    &kp C_VOL_UP &kp H         &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L   &hmr RGUI SEMI
    &kp Z        &kp X        &kp C         &kp V         &kp B        &kp C_PREV    &kp C_NEXT   &kp N         &kp M         &kp COMMA     &kp DOT       &kp FSLH
    &mo SYS      &smart_shft  &lt NAV ESC   &lt_spc NUM SPACE &lt FUNC TAB &lt MOUSE CAPS &lt_spc FUNC ENTER &mo SYS                                   &kp DEL
            >;
            sensor-bindings = <&encoder_scroll>;
        };

        // Layer 1: Function keys
        func_layer {
            label = "Function";
            bindings = <
    &kp F1    &kp F2     &kp F3    &kp F4    &kp F5                              &kp F6     &kp F7    &kp F8    &kp F9     &kp F10
    &kp F11   &kp F12    &kp PSCRN &kp SLCK  &kp PAUSE_BREAK &trans &trans      &kp INS    &kp HOME  &kp PG_UP &kp END    &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &kp DEL    &trans    &kp PG_DN &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans                                     &trans
            >;
            sensor-bindings = <&encoder_vol>;
        };

        // Layer 2: Numbers and symbols
        num_layer {
            label = "Numbers";
            bindings = <
    &kp N1    &kp N2     &kp N3    &kp N4    &kp N5                              &kp N6     &kp N7    &kp N8    &kp N9     &kp N0
    &kp EXCL  &kp AT     &kp HASH  &kp DLLR  &kp PRCNT  &trans    &trans        &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR
    &trans    &trans     &trans    &trans    &trans     &trans    &trans        &kp MINUS  &kp EQUAL &kp LBKT  &kp RBKT   &kp BSLH
    &trans    &trans     &trans    &trans    &trans     &trans    &trans        &trans                                     &trans
            >;
            sensor-bindings = <&encoder_vol>;
        };

        // Layer 3: Navigation
        nav_layer {
            label = "Navigation";
            bindings = <
    &kp ESC   &trans     &trans    &trans    &trans                              &trans     &trans    &kp UP    &trans     &kp BSPC
    &kp LGUI  &kp LALT   &kp LCTRL &kp LSHFT &trans    &trans    &trans         &kp HOME   &kp LEFT  &kp DOWN  &kp RIGHT  &kp END
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans     &kp PG_UP &kp PG_DN &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans                                     &trans
            >;
            sensor-bindings = <&inc_dec_kp LC(PG_UP) LC(PG_DN)>;
        };

        // Layer 4: Mouse control
        mouse_layer {
            label = "Mouse";
            bindings = <
    &trans    &trans     &trans    &trans    &trans                              &trans     &mkp LCLK &mkp MCLK &mkp RCLK  &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans     &mkp LCLK &mo SCROLL &mkp RCLK &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans     &trans    &trans    &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans                                     &tog MOUSE
            >;
            sensor-bindings = <&encoder_scroll>;
        };

        // Layer 5: Scroll control
        scroll_layer {
            label = "Scroll";
            bindings = <
    &trans    &trans     &trans    &trans    &trans                              &trans     &trans    &trans    &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans     &trans    &trans    &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans     &trans    &trans    &trans     &trans
    &trans    &trans     &trans    &trans    &trans    &trans    &trans         &trans                                     &trans
            >;
            sensor-bindings = <&msc SCRL_LEFT SCRL_RIGHT>;
        };

        // Layer 6: System controls
        sys_layer {
            label = "System";
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                    &trans     &trans    &trans    &trans     &sys_reset
    &trans       &trans       &trans       &trans       &trans       &trans    &trans   &trans     &trans    &trans    &trans     &bootloader
    &trans       &trans       &trans       &trans       &trans       &trans    &trans   &trans     &trans    &trans    &trans     &bt BT_CLR
    &trans       &trans       &trans       &trans       &trans       &trans    &trans   &trans                                     &bt BT_CLR_ALL
            >;
            sensor-bindings = <&encoder_vol>;
        };
    };
};