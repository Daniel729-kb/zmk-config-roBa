#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_WIN 0
#define DEFAULT_MAC 1
#define NUM_WIN 2
#define NUM_MAC 3
#define SYMBOL_WIN 4
#define SYMBOL_MAC 5
#define FUNC_SCROLL_WIN 6
#define FUNC_SCROLL_MAC 7
#define AML 8
#define KBD_SETTING 9

// ロータリーエンコーダー: スクロール量変更の定義を追記

#define ZMK_POINTING_DEFAULT_SCRL_VAL 120

//マウスカーソルの挙動設定

&mmv {
    delay-ms = <20>;
    trigger-period-ms = <5>;
    time-to-max-speed-ms = <200>;

    // acceleration-exponent = <0>;
};

//マウススクロールの挙動設定

&msc {
    delay-ms = <3>;
    trigger-period-ms = <3>;
    time-to-max-speed-ms = <200>;

    // acceleration-exponent = <0>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
    hold-while-undecided;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
    hold-while-undecided;
};

/ / {
    // ========================
    // COMBOS SECTION
    // ========================

    combos {
        compatible = "zmk,combos";

        // Mouse layer toggle - J+K keys

        mouse_toggle {
            bindings = <&tog MOUSE>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        // Navigation combos

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        alt_tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <11 12>;
        };

        // Punctuation combos

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <8 7>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
        };

        // Letter combos

        shift_z {
            bindings = <&kp LS(Z)>;
            key-positions = <22 23>;
        };

        question_mark {
            bindings = <&kp RS(SLASH)>;
            key-positions = <33 32>;
        };

        bs {
            bindings = <&kp BSPC>;
            key-positions = <9 8>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0_win: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>;

            label = "BT0";
        };

        bt1_mac: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1 &bt BT_DISC 0 &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        bt2_iPad: bt2_iPad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 2 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 3 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT2_IPAD";
        };

        bt3_iPhone: bt3_iPhone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 3 &bt BT_DISC 0 &bt BT_DISC 1 &bt BT_DISC 2 &bt BT_DISC 4>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT3_IPHONE";
        };

        // AML起動中にスクロールレイヤに入るためのマクロ(zaruSaruさん実装)

        to_scroll_layer_win: to_scroll_layer_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to FUNC_SCROLL_WIN>,
                <&macro_press>,
                <&mo FUNC_SCROLL_WIN>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo FUNC_SCROLL_WIN>;

            label = "TO_SCROLL_LAYER_WIN";
        };

        to_scroll_layer_mac: to_scroll_layer_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to FUNC_SCROLL_MAC>,
                <&macro_press>,
                <&mo FUNC_SCROLL_MAC>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo FUNC_SCROLL_MAC>;

            label = "TO_SCROLL_LAYER_MAC";
        };

        // タップ時のみAML解除するための設定

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off AML>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // タップ時のみAML解除するための設定

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        // ロータリーエンコーダーでスクロールする設定
        // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替え
        // 使い方: 設定したいレイヤーに sensor-bindings = <&encoder_msc_down_up>; を追記
        // mac用

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        //
        // windows用

        encoder_msc_up_down: encoder_msc_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        // Ctrl+スクロール (Windows用)

        encoder_msc_ctrl_up_down: encoder_msc_ctrl_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_CTRL_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&sk LCTRL &msc SCRL_UP>, <&sk LCTRL &msc SCRL_DOWN>;
        };

        // 接続先に応じてデフォルトレイヤーを変更するための動作
        // zmk studioで接続先ごとにマクロ設定する。

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // リピート付きのSpace and Shift

        sands: space_and_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_AND_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mtandkp: mt_and_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_AND_KP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mt>, <&kp>;
        };

        ltandkp: lt_and_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_AND_KP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <220>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&lt>, <&kp>;
        };

        // mod morphを使用したエンコーダーの挙動制御
        // Windows用
        // デフォルト: スクロール
        // Shift: Shift+←/→
        // Alt: Win+↑/↓
        // Ctrl: Win+←/→

        shift_p: shift_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(LEFT)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_default_p: shift_default_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&shift_p>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_p: alt_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(UP)>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        win_p: win_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(LEFT)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        alt_win_p: alt_win_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&alt_p>, <&win_p>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder_p: mod_morph_encoder_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_default_p>, <&alt_win_p>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        shift_n: shift_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(RIGHT)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        shift_default_n: shift_default_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&shift_n>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_n: alt_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(DOWN)>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        win_n: win_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LG(RIGHT)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        alt_win_n: alt_win_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&alt_n>, <&win_n>;

            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder_n: mod_morph_encoder_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_default_n>, <&alt_win_n>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        mod_morph_encoder: mod_morph_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mod_morph_encoder_n>, <&mod_morph_encoder_p>;

            tap-ms = <20>;
        };

        // Mac用
        // デフォルト: スクロール
        // GUI: command + +/-
        // Shift: Shift+←/→
        // Alt: Win+↑/↓
        // Ctrl: Win+←/→
        // positive: 手前

        gui_p: gui_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DELETE>, <&kp LG(PLUS)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;

            // keep-mods = <(MOD_LGUI)>;
        };

        sftgui_default_p: sftgui_default_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&gui_p>;

            mods = <(MOD_LGUI|MOD_RGUI|MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_p: ctrl_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LA(LC(LG(RIGHT)))>;

            mods = <(MOD_LCTL|MOD_RCTL)>;

            // keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };

        opt_p: opt_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LA(LC(LG(DOWN)))>;

            mods = <(MOD_LALT|MOD_RALT)>;

            // keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };

        opt_ctrl_p: opt_ctrl_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ctrl_p>, <&opt_p>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        mod_morph_encoder_mac_p: mod_morph_encoder_mac_p {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sftgui_default_p>, <&opt_ctrl_p>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL)>;
        };

        // negative: 奥

        gui_n: gui_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LG(MINUS)>;

            mods = <(MOD_LGUI|MOD_RGUI)>;

            // keep-mods = <(MOD_LGUI)>;
        };

        sftgui_default_n: sftgui_default_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&gui_n>;

            mods = <(MOD_LGUI|MOD_RGUI|MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_n: ctrl_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LA(LC(LG(LEFT)))>;

            mods = <(MOD_LCTL|MOD_RCTL)>;

            // keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };

        opt_n: opt_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LA(LC(LG(UP)))>;

            mods = <(MOD_LALT|MOD_RALT)>;

            // keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };

        opt_ctrl_n: opt_ctrl_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ctrl_n>, <&opt_n>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        mod_morph_encoder_mac_n: mod_morph_encoder_mac_n {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sftgui_default_n>, <&opt_ctrl_n>;

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL)>;
        };

        mod_morph_encoder_mac: mod_morph_encoder_mac {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mod_morph_encoder_mac_p>, <&mod_morph_encoder_mac_n>;

            tap-ms = <20>;
        };

        td_LT6_Lang1_and_MO4: td_LT6_Lang1_and_MO4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT6_LANG1_AND_MO4";
            #binding-cells = <0>;
            bindings = <&lt 6 LANGUAGE_1>, <&mo 4>;

            tapping-term-ms = <240>;
        };

        td_mt_left_ctrl: td_mt_left_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_LEFT_CTRL";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LCTRL X>,
                <&mt_exit_AML_on_tap LS(LCTRL) X>;
        };

        td_mt_right_ctrl: td_mt_right_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_RIGHT_CTRL";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LCTRL PERIOD>,
                <&mt_exit_AML_on_tap LS(LCTRL) PERIOD>;
        };

        td_mt_left_alt: td_mt_left_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_LEFT_ALT";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LEFT_ALT C>,
                <&mt_exit_AML_on_tap LS(LALT) C>;
        };

        td_mt_right_alt: td_mt_right_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_RIGHT_ALT";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LEFT_ALT COMMA>,
                <&mt_exit_AML_on_tap LS(LALT) COMMA>;
        };

        td_mt_left_win: td_mt_left_win {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_LEFT_WIN";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LEFT_WIN V>,
                <&mt_exit_AML_on_tap LS(LEFT_WIN) V>;
        };

        td_mt_right_win: td_mt_right_win {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MT_RIGHT_WIN";
            #binding-cells = <0>;
            bindings =
                <&mt_exit_AML_on_tap LEFT_WIN M>,
                <&mt_exit_AML_on_tap LS(LEFT_WIN) M>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_WIN {
            bindings = <
&kp Q             &kp W         &kp E      &kp R                         &kp T                                                           &kp Y               &kp U  &lt 6 I  &kp O    &kp P
&mt LCTRL A       &mt LCTRL S   &kp D      &kp F                         &kp G                 &kp LG(LS(S))              &kp EQUAL      &kp H               &kp J  &kp K         &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C      &kp V                         &kp B                 &kp AT                     &kp SEMI       &kp N               &kp M  &kp COMMA     &kp DOT  &kp SLASH
&kp LALT          &kp LEFT_GUI  &kp LCTRL  &lt_to_layer_3 SYSTEM ESCAPE  &space_sl2 NUM SPACE  &lt_to_layer_0 4 CAPS      &lt NUM SPACE  &lt FUNCTION ENTER                                &mt RIGHT_SHIFT DELETE
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        DEFAULT_MAC {
            bindings = <
&kp Q             &kp W         &kp E      &kp R                         &kp T                                                           &kp Y               &kp U  &lt 7 I  &kp O    &kp P
&mt LCTRL A       &mt LCTRL S   &kp D      &kp F                         &kp G                 &kp LG(LS(S))              &kp EQUAL      &kp H               &kp J  &kp K         &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C      &kp V                         &kp B                 &kp AT                     &kp SEMI       &kp N               &kp M  &kp COMMA     &kp DOT  &kp SLASH
&kp LCTRL          &kp LALT  &kp LEFT_GUI  &lt_to_layer_4 SYSTEM ESCAPE  &space_sl2 NUM SPACE  &lt_to_layer_0 4 CAPS      &lt NUM SPACE  &lt FUNCTION ENTER                                &mt RIGHT_SHIFT DELETE
            >;

            sensor-bindings = <&mod_morph_encoder_mac>;
        };

        NUM_WIN {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                         &kp NUMBER_6  &kp NUMBER_7  &kp N8     &kp NUMBER_9  &kp NUMBER_0
&kp EXCL      &kp AT        &kp POUND     &kp DLLR      &kp PRCNT  &trans      &trans  &kp CARET     &kp AMPS      &kp STAR   &kp LPAR      &kp RPAR
&kp F11       &kp F12       &trans        &trans        &trans     &trans      &trans  &trans        &trans        &kp COLON  &kp DQT       &kp UP_ARROW
&trans        &trans        &trans        &trans        &trans     &trans      &trans  &trans                                               &kp DOWN_ARROW
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        NUM_MAC {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                         &kp NUMBER_6  &kp NUMBER_7  &kp N8     &kp NUMBER_9  &kp NUMBER_0
&kp EXCL      &kp AT        &kp POUND     &kp DLLR      &kp PRCNT  &trans      &trans  &kp CARET     &kp AMPS      &kp STAR   &kp LPAR      &kp RPAR
&kp F11       &kp F12       &trans        &trans        &trans     &trans      &trans  &trans        &trans        &kp COLON  &kp DQT       &kp UP_ARROW
&trans        &trans        &trans        &trans        &trans     &trans      &trans  &trans                                               &kp DOWN_ARROW
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        SYMBOL_WIN {
            bindings = <
&kp SQT      &kp DOUBLE_QUOTES  &kp EXCLAMATION   &kp QUESTION      &kp TILDE                                              &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &kp PERCENT
&kp AT_SIGN  &kp SEMICOLON      &kp DOLLAR        &kp LESS_THAN     &kp GREATER_THAN  &trans              &kp ESCAPE       &kp HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE  &kp EQUAL
&trans       &kp ASTERISK       &kp COLON         &kp CARET         &kp GRAVE         &kp LEFT_BRACE      &kp RIGHT_BRACE  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans    &kp SLASH
&trans       &trans             &kp LS(LEFT_GUI)  &kp LS(LEFT_ALT)  &kp LS(LCTRL)     &trans              &trans           &trans                                                                &trans
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        SYMBOL_MAC {
            bindings = <
&kp SQT      &kp DOUBLE_QUOTES  &kp EXCLAMATION  &kp QUESTION      &kp TILDE                                              &kp BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &kp PERCENT
&kp AT_SIGN  &kp SEMICOLON      &kp DOLLAR       &kp LESS_THAN     &kp GREATER_THAN  &trans              &kp ESCAPE       &kp HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE  &kp EQUAL
&trans       &kp ASTERISK       &kp COLON        &kp CARET         &kp GRAVE         &kp LEFT_BRACE      &kp RIGHT_BRACE  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans    &kp SLASH
&trans       &trans             &kp LS(LCTRL)    &kp LS(LEFT_ALT)  &kp LS(LEFT_GUI)  &trans              &trans           &trans                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        FUNC_SCROLL_WIN {
            bindings = <
&kp F12  &kp F7      &kp F8  &kp F9  &trans                                           &none         &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &trans         &kp LS(LG(S))
&kp F11  &kp F4      &kp F5  &kp F6  &trans  &trans                &kp ESCAPE         &kp LA(LEFT)  &kp LS(LC(TAB))  &kp LC(TAB)        &kp LA(RIGHT)  &trans
&kp F10  &kp LC(F1)  &kp F2  &kp F3  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans        &trans           &trans             &trans         &trans
&trans   &trans      &trans  &trans  &trans  &trans                &trans             &trans                                                           &trans
            >;

            sensor-bindings = <&mod_morph_encoder>;
        };

        FUNC_SCROLL_MAC {
            bindings = <
&kp F12  &kp F7      &kp F8  &kp F9  &trans                                           &none         &kp LG(PAGE_UP)  &kp LG(PAGE_DOWN)  &none          &kp LS(LG(NUMBER_4))
&kp F11  &kp F4      &kp F5  &kp F6  &trans  &trans                &kp ESCAPE         &kp LG(LEFT)  &kp LS(LC(TAB))  &kp LC(TAB)        &kp LG(RIGHT)  &trans
&kp F10  &kp LG(F1)  &kp F2  &kp F3  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans        &trans           &trans             &trans         &trans
&trans   &trans      &trans  &trans  &trans  &trans                &trans             &trans                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(PLUS) LG(MINUS)>;
        };

        AML {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        KBD_SETTING {
            bindings = <
&trans          &trans  &trans  &trans  &trans                                &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&trans          &trans  &trans  &trans  &trans  &bootloader      &bootloader  &bt0_win              &bt1_mac              &bt2_iPad   &bt3_iPhone        &bt BT_SEL 4
&bt BT_CLR_ALL  &trans  &trans  &trans  &trans  &trans           &trans       &trans                &trans                &trans      &trans             &bt BT_CLR
&trans          &trans  &trans  &trans  &trans  &trans           &trans       &trans                                                                     &trans
            >;
        };
    };
};
